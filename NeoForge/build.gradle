plugins {
    id "java-library"
    id "idea"
    id "net.neoforged.gradle.userdev" version "[7.0.64,)"
}

version = "${project.version}"
jar.archiveClassifier = "neoforge"

configurations {
    library
    implementation.extendsFrom library
}

configurations.all {
    // Check for snapshots more frequently than Gradle"s default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

jarJar.enable()
tasks.jarJar.configure {
    archiveClassifier.set("neoforge")
}

tasks.named("build").configure {
    dependsOn("jarJar")
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation group: "mysticdrew", name: "common-networking-neoforge", version: project.common_networking_version
    jarJar (group: "mysticdrew", name: "common-networking-neoforge", version: project.common_networking_jarjar_version) {
        jarJar.pin(it, project.common_networking_version)
    }
    implementation "curse.maven:journeymap-${project.jm_project_id}:${project.jm_neoforge_file_id}"

    compileOnly project(":Common")
}

runs {
    configureEach {
        systemProperty "mixin.debug.export", "true"
        systemProperty "forge.logging.console.level", "info"

        modSource project.sourceSets.main
    }
    client {
        workingDirectory project.file("run/client")
    }
    server {
        workingDirectory project.file("run/server")
    }
}

TaskCollection.metaClass.excludingNeoTasks = { ->
    delegate.matching { !it.name.startsWith("neo") }
}

tasks.withType(JavaCompile).excludingNeoTasks().configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":Common").sourceSets.main.resources

    def buildProps = project.properties.clone()

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand buildProps
    }
}
